package ARM; 
import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;

parser code 
{:
    /**
     * Method that is called automatically before a syntactic error.
     **/ 
    public void syntax_error(Symbol s){
        String error = "Syntax Error on Line " + (s.left) +
        " Column "+s.right+ ". This component is not expected: " + s.value + "\n";
        CodeGeneration.errorList.add(error);
        CodeGeneration.syntacticError = 1;
    }

    /**
     * Method that is called automatically before a syntactic error 
     * where it is no longer possible error recovery.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
         
    }

:} 


action code {:

:}


terminal String AND,EOR,SUB,RSB,ADD,ADC,SBC,RSC,CMP,CMN,ORR,MOV;
terminal String LSL,LSR,ASR,RRX,ROR,BIC,MVN,MUL,MLA;
terminal String STR, LDR, STRB, LDRB;
terminal String B,BGE,BLE,BLT,BGT,BEQ,BNE;
terminal String BL,BLEQ,BLNE,BLGE,BLLT,BLGT,BLLE;
terminal String REGISTER;
terminal String DECIMALIMMEDIATE,HEXIMMEDIATE;
terminal String LABEL;
terminal String COMA;
terminal String CORCHETEIZQUIERDO,CORCHETEDERECHO, NEWINSTRUCTION;

non terminal assembly_code;
non terminal instruction;
non terminal register;


start with assembly_code; 

assembly_code::=instruction assembly_code | instruction;

instruction ::= AND:a register:r1 COMA:b register:r2 COMA:c register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0000","0",r2,r1,"00000","00",r3);:}
	| AND register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0000", r2, r1, r3);:}
        | AND register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0000", r2, r1, r3);:}
	| EOR register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0001","0",r2,r1,"00000","00",r3);:}
	| EOR register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0001", r2, r1, r3);:}
        | EOR register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0001", r2, r1, r3);:}
	| SUB register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0010","0",r2,r1,"00000","00",r3);:}
	| SUB register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0010", r2, r1, r3);:}
        | SUB register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0010", r2, r1, r3);:}
	| RSB register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0011","0",r2,r1,"00000","00",r3);:}
	| RSB register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0011", r2, r1, r3);:}
        | RSB register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0011", r2, r1, r3);:}
	| ADD register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0100","0",r2,r1,"00000","00",r3);:}
	| ADD register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0100", r2, r1, r3);:}
        | ADD register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0100", r2, r1, r3);:}
	| ADC register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0101","0",r2,r1,"00000","00",r3);:}
	| ADC register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0101", r2, r1, r3);:}
        | ADC register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0101", r2, r1, r3);:}
	| SBC register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0110","0",r2,r1,"00000","00",r3);:}
	| SBC register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0110", r2, r1, r3);:}
        | SBC register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0110", r2, r1, r3);:}
	| RSC register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","0111","0",r2,r1,"00000","00",r3);:}
	| RSC register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "0111", r2, r1, r3);:}
        | RSC register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "0111", r2, r1, r3);:}
	| CMP register:r1 COMA register:r2 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","1010","1",r1,"0000","00000","00",r2);:}
	| CMP register:r1 COMA DECIMALIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "1010", r1, "0000", r2);:}
        | CMP register:r1 COMA HEXIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "1010", r1, "0000", r2);:}
	| CMN register:r1 COMA register:r2 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","1011","1",r2,r1,"00000","00","0010");:} 
	| CMN register:r1 COMA DECIMALIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "1011", r1, "0000", r2);:}
        | CMN register:r1 COMA HEXIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "1011", r1, "0000", r2);:}
	| ORR register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","1100","0",r2,r1,"00000","00",r3);:}
	| ORR register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "1100", r2, r1, r3);:}
        | ORR register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "1100", r2, r1, r3);:}
	| MOV register:r1 COMA register:r2 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","1101","0","0000",r1,"00000","00",r2);:}
	| MOV register:r1 COMA DECIMALIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "1101", "0000", r1, r2);:}
        | MOV register:r1 COMA HEXIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "1101", "0000", r1, r2);:}
	| LSL register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"00",r2);:}
	| LSL register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "00", r2);:}
        | LSL register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrHexImmediate("1110", "1101", r1, r3, "00", r2);:}
        | LSR register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"01",r2);:}
	| LSR register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "01", r2);:}
        | LSR register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrHexImmediate("1110", "1101", r1, r3, "01", r2);:}
	| ASR register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"10",r2);:}
	| ASR register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "10", r2);:} 
        | ASR register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrHexImmediate("1110", "1101", r1, r3, "10", r2);:} 
	| RRX register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"11",r2);:}
	| RRX register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "11", r2);:} 
	| ROR register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterShiftedRegister("1110","00","0","1101","0","0000",r1,r3,"11",r2);:}
	| ROR register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrDecImmediate("1110", "1101", r1, r3, "11", r2);:} 
        | ROR register:r1 COMA register:r2 COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeShiftInstrHexImmediate("1110", "1101", r1, r3, "11", r2);:} 
	| BIC register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","1110","0",r2,r1,"00000","00",r3);:}
	| BIC register:r1 COMA register:r2 COMA DECIMALIMMEDIATE:r3 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "1110", r2, r1, r3);:}
	| MVN register:r1 COMA register:r2 {:RESULT=CodeGeneration.generateCodeAddressingRegisterOnly("1110","00","0","1111","0","0000",r1,"00000","00",r2);:}
	| MVN register:r1 COMA DECIMALIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrDecImmediate("1110", "1111", "0000", r1, r2);:}
        | MVN register:r1 COMA HEXIMMEDIATE:r2 {:RESULT= CodeGeneration.generateCodeDataProcessingInstrHexImmediate("1110", "1111", "0000", r1, r2);:}
	| MUL register:r1 COMA register:r2 COMA register:r3 {:RESULT=CodeGeneration.generateCodeMultiplicationInstr("1110", "000", "0", r1, "0000", r3, r2);:}
	| MLA register:r1 COMA register:r2 COMA register:r3 COMA register:r4 {:RESULT=CodeGeneration.generateCodeMultiplicationInstr("1110", "001", "0", r1, r4, r3, r2);:}
	| STR register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA DECIMALIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","1", "0", "0", "0", r2, r1, r3);:}
        | STR register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA HEXIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","1", "0", "0", "0", r2, r1, r3);:}
	| STR register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","0", "0", "0", "0", r2, r1, r3);:}
        | STR register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","0", "0", "0", "0", r2, r1, r3);:}
        | STR register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA register:r3 CORCHETEDERECHO {:RESULT = CodeGeneration.generateCodeMemoryRegisterOffset("1110", "1", "1", "0" ,"0", "0", r2, r1, r3);:}
	| LDR register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA DECIMALIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","1", "0", "0", "1", r2, r1, r3);:}
        | LDR register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA HEXIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","1", "0", "0", "1", r2, r1, r3);:}
	| LDR register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","0", "0", "0", "1", r2, r1, r3);:}
        | LDR register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","0", "0", "0", "1", r2, r1, r3);:}
        | LDR register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA register:r3 CORCHETEDERECHO {:RESULT = CodeGeneration.generateCodeMemoryRegisterOffset("1110", "1", "1", "0" ,"0", "1", r2, r1, r3);:}
	| STRB register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA DECIMALIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","1", "0", "1", "0", r2, r1, r3);:}
        | STRB register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA HEXIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","1", "0", "1", "0", r2, r1, r3);:}
	| STRB register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","0", "0", "1", "0", r2, r1, r3);:}
        | STRB register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","0", "0", "1", "0", r2, r1, r3);:}
        | STRB register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA register:r3 CORCHETEDERECHO {:RESULT = CodeGeneration.generateCodeMemoryRegisterOffset("1110", "1", "1", "1" ,"0", "0", r2, r1, r3);:}
	| LDRB register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA DECIMALIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","1", "0", "1", "1", r2, r1, r3);:}
        | LDRB register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA HEXIMMEDIATE:r3 CORCHETEDERECHO {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","1", "0", "1", "1", r2, r1, r3);:}
	| LDRB register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA DECIMALIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrDecImmediate("1110","0", "0", "1", "1", r2, r1, r3);:}
        | LDRB register:r1 COMA CORCHETEIZQUIERDO register:r2 CORCHETEDERECHO COMA HEXIMMEDIATE:r3 {:RESULT=CodeGeneration.generateCodeMemoryInstrHexImmediate("1110","1", "0", "1", "1", r2, r1, r3);:}
        | LDRB register:r1 COMA CORCHETEIZQUIERDO register:r2 COMA register:r3 CORCHETEDERECHO {:RESULT = CodeGeneration.generateCodeMemoryRegisterOffset("1110", "1", "1", "1" ,"0", "1", r2, r1, r3);:}
	| B LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1110", "10", e1);:}
        | BGE LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1010", "10", e1);:}
        | BLE LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1101", "10", e1);:}
        | BLT LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1011", "10", e1);:}
        | BGT LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1100", "10", e1);:}
        | BEQ LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("0000", "10", e1);:}
        | BNE LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("0001", "10", e1);:}
	| BL LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1110", "11", e1);:}
        | BLEQ LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("0000", "11", e1);:}
        | BLNE LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("0001", "11", e1);:}
        | BLGE LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1010", "11", e1);:}
        | BLLT LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1011", "11", e1);:}
        | BLGT LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1100", "11", e1);:}
        | BLLE LABEL:e1 {:RESULT= CodeGeneration.generateCodeBranchInstructions("1101", "11", e1);:}
        | NEWINSTRUCTION
        | LABEL
        
;

register::= REGISTER:r   {: RESULT=r; :}
;
