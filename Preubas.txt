mov R4, #0xFF
mov R5, #10
mov R6, #20
mov R7, #30
mov R8, #0xFF
mov R9, #0xFFFF06
mov R10, #0xFFFF07
mov R11, #0xFFFF08
mov R12, #0xFFFF09
add R0,R5,R6
add R0,R0,R0
add R1, R4, R8
mov R3, #0xF
mov R4, #1
add R0,R3,#0XF



mov r3,#10

mov r1, #0x00
mov r3, #20
mov r2,#0xABCDEF
str r2,[r1,#0x20]
str r2,[r1],#0x40
str r2,[r1,r3]
str r2,[r1],r3
str r2,[r1]



Papaya
mov R4, #0xFF
Daniel
mov R5, #10
mov R6, #20
mov R7, #30
Canessa
mov R8, #0xFF
mov R9, #0xFFFF06
mov R10, #0xFFFF07
mov R11, #0xFFFF08
mov R12, #0xFFFF09
add R0,R5,R6
Pablo
add R0,R0,R0
add R1, R4, R8
mov R3, #0xF
mov R4, #1
add R0,R3,#0XF

Chat

mov r3,#10

mov r1, #0x00
mov r3, #20
mov r2,#0xABCDEF
str r2,[r1,#0x20]
str r2,[r1],#0x40
Juan
str r2,[r1,r3]
str r2,[r1],r3
str r2,[r1]
End




mov r1,#0xFFFFFFFF
mov r2, #1
add r0,r1,r2
Done


















mov r0, #0x0 
mov r5, #7 
strb r5,[r0,#0]
mov r5, #0xAA 
strb r5,[r0,#4]	
mov r5,#0x48
strb r5,[r0,#8]
mov r5,#0x65
strb r5,[r0,#9]
mov r5,#0x6c
strb r5,[r0,#10]
mov r5,#0x6c
strb r5,[r0,#11]
mov r5,#0x6f
strb r5,[r0,#12]
mov r5,#0x21
strb r5,[r0,#13]
mov r5,#0x00
strb r5,[r0,#14]
ldr r3,[r0,#0]
add r0,r0,#4
ldr r4,[r0,#0]
add r0,r0,#4		
mov r1, #0
encrypt	
cmp r1,r3
BGE done
LDRB R2,[r0,r1]
add r2,r2,#20 
eor r2,r2,r4
strb r2,[r0,r1]
add r1,r1,#0x1
b encrypt		
done

		mov		r1, #0 ;Se pone en r1 un 0
loop		cmp		r1,r3 ;compara r1 con r3 (longitud del arreglo)
		BGE		ready ;si no se cumple la comparación continua
		LDRB		R2,[r0,r1] ;se obtiene el primer byte y se guarda temporalmente en r2		
		eor		r2,r2,r4 ;se realiza un xor entre r2 y r4 que es el password
		sub		r2,r2,#20 ;se le suma 20 al byte obtenido
		strb		r2,[r0,r1] ;se almacena en la direccion original de memoria r2
		add		r1,r1,#0x1 ;se aumenta r1 (contador)
		b		loop
		
ready



mov r1, #0
mov r3, #10
cmp r1,r3


mov r1, #0
mov r3, #10
encrypt	
cmp r1,r3
BGE done
add r1,r1,#0x1
b encrypt		
done


MOV R0,#14
MOV R1,#15
CMP R0,R1
BGT DANIEL
MOV R10,#1
DANIEL
MOV R2,#1




MOV R0,#14
MOV R1,#15
CMP R0,R1
Bl DANIEL
MOV R10,#1
DANIEL
MOV R2,#1




MOV R0,#16
MOV R1,#15
CMP R0,R1
BLEQ DANIEL
MOV R10,#1
DANIEL
MOV R2,#1













mov r2, #0x20 
mov r6, #15 
strb r6,[r2,#0]
request
mov r3, #0XF0
strb r3,[r2,#1]			
mov r7, #0XFF
strb r7,[r2,#2]			
waitPC
LDRB R7,[r2,#2] 
cmp r7,#0xFF
BGE size
b waitPC			
size
LDRB r3,[r2,#0] 
mov r9, #4
mul r3,r3,r9
sub r3,r3,#8			
mov r9,r3
mov r8, #1	
initFibonacci		
mov r0, #0x40
mov r1, #1 
str r1,[r0,#0] 
str r1,[r0,#4] 
mov r1, #0 		
fibonacci
cmp r1,r3 
BGE done 
LDR r4,[r0,r1] 
add r1,r1,#4
LDR r5,[r0,r1] 
add r4,r4,r5 
add r1,r1,#0x4
str r4,[r0,r1] 
sub r1,r1,#4 
b fibonacci
done
mov r4, #0X11 
strb r4,[r2,#1] 	